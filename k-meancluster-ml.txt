def barplot_visualization(x):
  fig = plt.Figure(figsize = (12, 6))
  fig = px.bar(x = df[x].value_counts().index, y = df[x].value_counts(), color = df[x].value_counts().index, height = 600)
  fig.show();

barplot_visualization('COUNTRY')
barplot_visualization('STATUS');
df.drop(columns=['STATUS'], axis=1, inplace=True)
print('Columns resume: ', df.shape[1])
barplot_visualization('PRODUCTLINE')

def dummies(x):
  dummy = pd.get_dummies(df[x])
  df.drop(columns=x, inplace=True)
  return pd.concat([df, dummy], axis = 1)

df =  dummies('COUNTRY')
df =  dummies('PRODUCTLINE')
df =  dummies('DEALSIZE')
y = pd.Categorical(df['PRODUCTCODE'])
y
df['PRODUCTCODE'] = pd.Categorical(df['PRODUCTCODE']).codes
df_group = df.groupby(by='ORDERDATE').sum()
fig = px.line(x = df_group.index, y = df_group.SALES, title='sales_peak')
fig.show();

df.drop('ORDERDATE', axis=1, inplace=True)
df.drop('QTR_ID', axis=1, inplace=True)

scaler =  StandardScaler()
df_scaled = scaler.fit_transform(df)

scores = []
range_values = range(1, 15)
for i in range_values:
  kmeans = KMeans(n_clusters = i)
  kmeans.fit(df_scaled)
  scores.append(kmeans.inertia_)

plt.plot(scores, 'bx-')
plt.title('Finding right number of clusters')
plt.xlabel('Clusters')
plt.ylabel('scores') 
plt.show();

kmeans = KMeans(4)
kmeans.fit(df_scaled)
labels = kmeans.labels_
labels
kmeans.cluster_centers_.shape
cluster_centers = pd.DataFrame(data = kmeans.cluster_centers_, columns= [df.columns])
cluster_centers
cluster_centers = scaler.inverse_transform(cluster_centers)
cluster_centers = pd.DataFrame(data=cluster_centers, columns=[df.columns])
cluster_centers
sales_of_cluster = pd.concat([df, pd.DataFrame({'cluster': labels})], axis=1)
sales_of_cluster.head()
